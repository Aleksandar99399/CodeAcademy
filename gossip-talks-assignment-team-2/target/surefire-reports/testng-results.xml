<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="16" passed="16">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="32193" started-at="2021-09-30T10:27:37 EEST" finished-at="2021-09-30T10:28:09 EEST">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="32193" started-at="2021-09-30T10:27:37 EEST" finished-at="2021-09-30T10:28:09 EEST">
      <class name="bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="32" started-at="2021-09-30T10:27:37 EEST" finished-at="2021-09-30T10:27:37 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="27230" started-at="2021-09-30T10:27:37 EEST" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2021-09-30T10:28:05 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="6" started-at="2021-09-30T10:28:05 EEST" finished-at="2021-09-30T10:28:05 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.create_User_correct() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="create_User_correct()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="create_User_correct" duration-ms="1478" started-at="2021-09-30T10:28:05 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- create_User_correct -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.create_User_correct() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="14" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_Users_correct() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="get_Users_correct()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="get_Users_correct" duration-ms="102" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_Users_correct -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_Users_correct() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="4" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_all_users_with_name_params_unauthorized() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="get_all_users_with_name_params_unauthorized()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="get_all_users_with_name_params_unauthorized" duration-ms="28" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_all_users_with_name_params_unauthorized -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_all_users_with_name_params_unauthorized() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_all_users_without_params() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="get_all_users_without_params()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="get_all_users_without_params" duration-ms="54" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_all_users_without_params -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_all_users_without_params() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_current_logged_user() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="get_current_logged_user()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="get_current_logged_user" duration-ms="123" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_current_logged_user -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest.get_current_logged_user() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest@563c3aca]" name="springTestContextAfterTestClass" is-config="true" duration-ms="5" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:06 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.controllerTest.UserControllerTest -->
      <class name="bg.codeacademy.spring.gossiptalks.servicesTest.GossipServiceTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.GossipServiceTest@c6244e7]" name="setUp" is-config="true" duration-ms="850" started-at="2021-09-30T10:28:06 EEST" finished-at="2021-09-30T10:28:07 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_save_gossip_with_correct_username_save()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.GossipServiceTest@c6244e7]" name="try_to_save_gossip_with_correct_username_save" duration-ms="52" started-at="2021-09-30T10:28:07 EEST" finished-at="2021-09-30T10:28:07 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_save_gossip_with_correct_username_save -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.servicesTest.GossipServiceTest -->
      <class name="bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="28" started-at="2021-09-30T10:28:07 EEST" finished-at="2021-09-30T10:28:07 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_change_password_with_noPasswordMatch_changePassword()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_change_password_with_noPasswordMatch_changePassword" duration-ms="244" started-at="2021-09-30T10:28:07 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.userexceptions.PasswordsNotMatchException">
            <message>
              <![CDATA[Your current password is wrong]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.userexceptions.PasswordsNotMatchException: Your current password is wrong
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.changePassword(UserServiceImpl.java:100)
at bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest.try_to_change_password_with_noPasswordMatch_changePassword(UserServiceTest.java:121)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.userexceptions.PasswordsNotMatchException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_change_password_with_noPasswordMatch_changePassword -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_change_password_with_nonexisting_user_changePassword()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_change_password_with_nonexisting_user_changePassword" duration-ms="118" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException">
            <message>
              <![CDATA[User not exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException: User not exist
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.lambda$getByUsername$1(UserServiceImpl.java:110)
at java.util.Optional.orElseThrow(Optional.java:290)
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.getByUsername(UserServiceImpl.java:110)
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.changePassword(UserServiceImpl.java:97)
at bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest.try_to_change_password_with_nonexisting_user_changePassword(UserServiceTest.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_change_password_with_nonexisting_user_changePassword -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_change_password_with_right_password_and_existing_username_changePassword()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_change_password_with_right_password_and_existing_username_changePassword" duration-ms="234" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_change_password_with_right_password_and_existing_username_changePassword -->
        <test-method status="PASS" signature="try_to_create_user_save()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_create_user_save" duration-ms="232" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_create_user_save -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:08 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_create_user_with_existing_username_save()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_create_user_with_existing_username_save" duration-ms="382" started-at="2021-09-30T10:28:08 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_create_user_with_existing_username_save -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_get_all_users_by_SubString_getAll()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_get_all_users_by_SubString_getAll" duration-ms="346" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_get_all_users_by_SubString_getAll -->
        <test-method status="PASS" signature="try_to_get_by_nonexisting_username_getByUsername()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_get_by_nonexisting_username_getByUsername" duration-ms="120" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException">
            <message>
              <![CDATA[User not exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException: User not exist
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.lambda$getByUsername$1(UserServiceImpl.java:110)
at java.util.Optional.orElseThrow(Optional.java:290)
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.getByUsername(UserServiceImpl.java:110)
at bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest.try_to_get_by_nonexisting_username_getByUsername(UserServiceTest.java:112)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_get_by_nonexisting_username_getByUsername -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="2" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_get_by_username_correct_getByUsername()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_get_by_username_correct_getByUsername" duration-ms="121" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_get_by_username_correct_getByUsername -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="1" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_get_current_logged_user_by_not_exist_username()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_get_current_logged_user_by_not_exist_username" duration-ms="122" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <exception class="bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException">
            <message>
              <![CDATA[User not exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException: User not exist
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.lambda$getByUsername$1(UserServiceImpl.java:110)
at java.util.Optional.orElseThrow(Optional.java:290)
at bg.codeacademy.spring.gossiptalks.service.impl.UserServiceImpl.getByUsername(UserServiceImpl.java:110)
at bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest.try_to_get_current_logged_user_by_not_exist_username(UserServiceTest.java:150)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1259)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- bg.codeacademy.spring.gossiptalks.exception.userexceptions.ExistUserException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_get_current_logged_user_by_not_exist_username -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="setUp" is-config="true" duration-ms="0" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="try_to_get_current_logged_user_by_username_getCurrentLoggedUser()[pri:0, instance:bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest@5a4b8e25]" name="try_to_get_current_logged_user_by_username_getCurrentLoggedUser" duration-ms="119" started-at="2021-09-30T10:28:09 EEST" finished-at="2021-09-30T10:28:09 EEST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- try_to_get_current_logged_user_by_username_getCurrentLoggedUser -->
      </class> <!-- bg.codeacademy.spring.gossiptalks.servicesTest.UserServiceTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
