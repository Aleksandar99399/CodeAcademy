package bg.codeacademy.spring.gossiptalks.model.entity;

import bg.codeacademy.spring.gossiptalks.validation.StrongPassword;
import com.sun.istack.Nullable;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.Pattern;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Entity
public class User
{
   private Long         id;
   private String       username;
   private String       password;
   private String       email;
   private String       name;
   private Boolean      following;
   private List<Gossip> gossips = new ArrayList<>();
   //Set by User
   private List<User>   friends = new ArrayList<>();


   public User()
   {
   }

   @Id
   @GeneratedValue
   public Long getId()
   {
      return id;
   }

   public User setId(Long id)
   {
      this.id = id;
      return this;
   }

   @Pattern(regexp = "^[a-z0-9\\.\\-]+$", message = "Username is not valid! (a-z0-9.-)")
   @Column(unique = true)
   public String getUsername()
   {
      return username;
   }

   public User setUsername(String username)
   {
      this.username = username;
      return this;
   }

   @StrongPassword
   @Pattern(regexp = "<(\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*>")
   public String getPassword()
   {
      return password;
   }

   public User setPassword(String password)
   {
      this.password = password;
      return this;
   }

   @Email(message = "Email is not valid")
   public String getEmail()
   {
      return email;
   }

   public User setEmail(String email)
   {
      this.email = email;
      return this;
   }

   @Transient
   public Boolean getFollowing()
   {
      return following;
   }

   public User setFollowing(Boolean following)
   {
      this.following = following;
      return this;
   }

   public String getName()
   {
      return name;
   }

   public User setName(String name)
   {
      this.name = name;
      return this;
   }

   @ManyToMany
   @NotFound(action= NotFoundAction.IGNORE)
   @JoinTable(name = "user_gossips",
       joinColumns = @JoinColumn(name = "user_id"),
       inverseJoinColumns = @JoinColumn(name = "gossip_id"))
   public List<Gossip> getGossips()
   {
      return gossips;
   }

   public User setGossips(List<Gossip> gossips)
   {
      this.gossips = gossips;
      return this;
   }

   @ManyToMany
   public List<User> getFriends()
   {
      return friends;
   }

   public User setFriends(List<User> allUsers)
   {
      this.friends = allUsers;
      return this;
   }

   @Override
   public String toString()
   {
      return "User{" +
         "id=" + id +
         ", username='" + username + '\'' +
         ", password='" + password + '\'' +
         ", email='" + email + '\'' +
         ", name='" + name + '\'' +
         '}';
   }


}
